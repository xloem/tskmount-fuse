#!/usr/bin/perl -w
# tskmount, is a Fuse filesystem based on The Sleuth Kit tools
# $Id$
# Author:  Jean Diraison <jean.diraison@ac-versailles.fr>, <jean.diraison@ac-rennes.fr>
# Date:    Mon, 13 Aug 2007 23:39:53 +0200
# Version: 0.01
# License: GPLv2
# Purpose: it tries to provide an easy way to recover removed
#          files over ext2, fat and ntfs filesystems
# Notes:   it is long to init and copying files is really slow
# Requires:  Perl, Fuse, perl-Fuse, sleuthkit

use strict;
use Getopt::Long;
use POSIX qw(:errno_h :fcntl_h);
use Fcntl ':mode';
use Fuse;

#
my $CMD_FLS  = "fls";
my $CMD_ILS  = "ils";
my $CMD_ICAT = "icat";

#
my $FULL_DIR_FLAGS  = (S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO);
my $FULL_FILE_FLAGS = (S_IFREG | S_IRWXU | S_IRWXG | S_IRWXO);

my $DEFAULT_BLOCKSIZE = 512;

my $MIN_FILE_SIZE_ALERT = (1<<24);

my $FILESYSTEM;

my $FREE_INODE_NUM = 1;

my @files  = ();
my %inodes = ();

my ($option_full, $option_enhance, $option_verbose, $option_help, $option_mountopts) = (0, 0, 1, 0, "");

########################################

sub tskfs_getattr {
	my $filename = $_[0];
	if ( defined $inodes{$filename} ) {
		my $inodef = $inodes{$filename};
		$inodef =~ m/^(\d+)\|(\d+)\|(.*)\|(\d+)\|([\d\-]+)\|(\d+)\|([dlbcp\-]\/[rwxstSTdlbcp\-]{10})\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|\d$/;
		my ($inodenum, $unk1, $filename, $dev, $inode, $modenum, $mode, $nlink, $uid, $gid, $rdev, $size, $mtime, $atime, $ctime, $blocksize) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
		$modenum = $FULL_FILE_FLAGS  if ($modenum == 0);
		$blocksize = $DEFAULT_BLOCKSIZE  if ($blocksize == 0);
		my $numblocks = int(($size+$blocksize-1)/$blocksize);
		return ($dev, $inodenum, $modenum, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blocksize, $numblocks);
	} else {
		return -ENOENT();
	}
}

sub tskfs_getdir {
	my $dirname = $_[0];
	if ( defined $inodes{$dirname} ) {
		my @dircontent = ();
		my $inodef = $inodes{$dirname};
		$inodef =~ m/^\d+\|\d+\|.*\|\d+\|[\d\-]+\|(\d+)\|[dlbcp\-]\/[rwxstSTdlbcp\-]{10}\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d$/;
		my $modenum = $1;
		if (! S_ISDIR($modenum) ) {
			return -ENOTDIR();
		}
		$dirname = ""  if ($dirname eq "/");
		foreach my $file (@files) {
			if ($file =~ m/^$dirname\/[^\/]+$/) {
				$file =~ m/^$dirname\/([^\/]+)$/;
				push(@dircontent, $1);
			}
		}
		push (@dircontent, 0);
		return @dircontent;
	} else {
		return -ENOENT();
	}
}

sub tskfs_open {
	my $filename = $_[0];
	my $openmode = $_[1] & (~0100000);
	if ( defined $inodes{$filename} ) {
		my $inodef = $inodes{$filename};
		$inodef =~ m/^\d+\|\d+\|.*\|\d+\|([\d\-]+)\|(\d+)\|[dlbcp\-]\/[rwxstSTdlbcp\-]{10}\|\d+\|\d+\|\d+\|\d+\|(\d+)\|\d+\|\d+\|\d+\|\d+\|\d$/;
		my ($inode, $modenum, $size) = ($1, $2, $3);
		if (S_ISREG($modenum) && ($openmode == O_RDONLY)) {
			if (($option_verbose) && ($size > $MIN_FILE_SIZE_ALERT)) {
				print "If you intend to read or copy that big file, you should really call:\n\t"."$CMD_ICAT -r '$FILESYSTEM' $inode"." >newname\n";
			}
			return 0;
		}
		return -EPERM();
	} else {
		return -ENOENT();
	}
}

sub tskfs_read {
	my ($filename, $count, $offset) = @_;
	if ( defined $inodes{$filename} ) {
		my $inodef = $inodes{$filename};
		$inodef =~ m/^\d+\|\d+\|.*\|\d+\|([\d\-]+)\|\d+\|[dlbcp\-]\/[rwxstSTdlbcp\-]{10}\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d+\|\d$/;
		my $inode = $1;
		my $ibs = 1;
		for(my $i=9; $i<15; $i++) {
			if ($offset % (1<<$i) == 0) {
				$ibs = 1<<$i;
			}
		}
		my $obs = 1;
		for(my $i=9; $i<15; $i++) {
			if ($count % (1<<$i) == 0) {
				$obs = 1<<$i;
			}
		}
		my $skip = $offset / $ibs;
		my $ocount = $count / $obs;
		my $data = "";
		my $tmpdata;
		open(ICATDAT, "-|", "$CMD_ICAT -r '$FILESYSTEM' $inode") or return -EIO();
		while ($skip != 0) {
			my $len = read ICATDAT, $tmpdata, $ibs  or  return -EIO();
			if ($len <= 0) { return -EIO(); }
			$skip--;
		}
		while ($ocount != 0) {
			my $len = read ICATDAT, $tmpdata, $obs  or  return -EIO();
			if ($len <= 0) { return -EIO(); }
			$data .= $tmpdata;
			$ocount--;
		}
		close ICATDAT;
		return $data;
	} else {
		return -ENOENT();
	}
}

########################################

sub init_fls {
	my $OPT_FLS = $_[0] || "";
	open(FLSDAT, "-|", "$CMD_FLS $OPT_FLS -r -a -m / '$FILESYSTEM'") or die "Can't open fls output data file !";
	while (my $item = <FLSDAT>) {
		$item =~ m/^\d\|(.*)\|\d\|([\d\-]+)\|\d+\|[dlbcp\-]\/[rwxstSTdlbcp\-]{10}\|(\d+)\|/;
		my ($filename, $inode, $nlink) = ($1, $2, $3);
		if ($nlink == 0) {
			$filename =~ s/\(deleted\)$/\(deleted_$inode\)/;
			my $dirname = $filename;
			while (($dirname =~ s=/[^/]+$==) && $dirname ne "") {
				last  if ( defined $inodes{$dirname} );
				$inodes{$dirname} = ($FREE_INODE_NUM++)."|0|".$dirname."|0|1|".$FULL_DIR_FLAGS."|d/drwxrwxrwx|2|0|0|0|".$DEFAULT_BLOCKSIZE."|0|0|0|".$DEFAULT_BLOCKSIZE."|0";
				push(@files, $dirname);
				if ( ! defined $inodes{$dirname."/."} ) {
					$inodes{$dirname."/."} = ($FREE_INODE_NUM++)."|0|".$dirname."/."."|0|1|".$FULL_DIR_FLAGS."|d/drwxrwxrwx|2|0|0|0|".$DEFAULT_BLOCKSIZE."|0|0|0|".$DEFAULT_BLOCKSIZE."|0";
					push(@files, $dirname."/.");
				}
				if ( ! defined $inodes{$dirname."/.."} ) {
					$inodes{$dirname."/.."} = ($FREE_INODE_NUM++)."|0|".$dirname."/.."."|0|1|".$FULL_DIR_FLAGS."|d/drwxrwxrwx|2|0|0|0|".$DEFAULT_BLOCKSIZE."|0|0|0|".$DEFAULT_BLOCKSIZE."|0";
					push(@files, $dirname."/..");
				}
			}
		}
		while ( defined $inodes{$filename} ) {
			$filename =~ s/\(deleted/(deleted_/  or  $filename =~ s/$/_/;
		}
		$inodes{$filename} = ($FREE_INODE_NUM++)."|".$item;
		push(@files, $filename);
	}
	close(FLSDAT);
	if ( ! defined $inodes{"/."} ) {
		$inodes{"/."} = ($FREE_INODE_NUM++)."|0|/.|0|1|".$FULL_DIR_FLAGS."|d/drwxrwxrwx|2|0|0|0|".$DEFAULT_BLOCKSIZE."|0|0|0|".$DEFAULT_BLOCKSIZE."|0";
		push(@files, "/.");
	}
	if ( ! defined $inodes{"/.."} ) {
		$inodes{"/."} = ($FREE_INODE_NUM++)."|0|/..|0|1|".$FULL_DIR_FLAGS."|d/drwxrwxrwx|2|0|0|0|".$DEFAULT_BLOCKSIZE."|0|0|0|".$DEFAULT_BLOCKSIZE."|0";
		push(@files, "/..");
	}
	my $root = $inodes{"/."};
	$root =~ s/\.//;
	$inodes{"/"} = ($FREE_INODE_NUM++)."|".$root;
	push(@files, "/");
}

########################################

sub init_ils {
	my $OPT_ILS = $_[0] || "";
	open(ILSDAT, "-|", "$CMD_ILS $OPT_ILS -r '$FILESYSTEM'") or die "Can't open ils output data file !";
	my $item = <ILSDAT>; $item = <ILSDAT>; $item = <ILSDAT>;		# discard first 3 lines
	while ($item = <ILSDAT>) {
		$item =~ m/^(\d+)\|.\|([\-\d]+)\|([\-\d]+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|(\d+)\|\d+\|\d+$/;
		my ($inode, $uid, $gid, $mtime, $atime, $ctime, $modenum, $nlink, $size) = ($1, $2, $3, $4, $5, $6, $7, $8, $9);
		if ($size != 0) {
			$modenum = oct("0".$modenum);
			$uid = 0  if ($uid < 0);
			$gid = 0  if ($gid < 0);
			my $filename = "/(deleted_$inode)";
			my $entry = "0|$filename|0|$inode|$modenum|-/-rwxrwxrwx|$nlink|$uid|$gid|0|$size|$mtime|$atime|$ctime|".$DEFAULT_BLOCKSIZE."|0";
			$inodes{$filename} = ($FREE_INODE_NUM++)."|".$entry;
			push(@files, $filename);
		}
	}
	close(ILSDAT);
}

########################################

my $options = GetOptions("f|full" => \$option_full,
       			 "d|deleted" => sub { $option_full = 0 },
			 "e|enhance" => \$option_enhance,
			 "v|verbose+" => \$option_verbose,
			 "q|quiet" => sub { $option_verbose = 0 },
			 "o|options=s" => \$option_mountopts,
			 "h|help" => \$option_help);


if ((@ARGV != 2) || ($option_help == 1)) {
	my $progname = $0;
	$progname =~ s=./==g;
	print "A Fuse filesystem based on The Sleuth Kit (http://www.sleuthkit.org/)\n";
	print "usage: $progname [-fdevqh] [-o fuseoptions] filesystem mountpoint\n";
	print "\t\tfilesystem      a readable device (/dev/hda1) or image file (fs.bin)\n";
	print "\t\tmountpoint      an empty directory where to mount\n";
	print "\t\t-f, --full      show all files (slow)\n";
	print "\t\t-d, --deleted   show only deleted files (default)\n";
	print "\t\t-e, --enhance   enhance deleted files search (default if -f option)\n";
	print "\t\t-v, --verbose   print status messages (default)\n";
	print "\t\t-q, --quiet     do not print status messages\n";
	print "\t\t-o, --options   a list of options to pass to fuse (e.g -o allow_other)\n";
	print "\t\t-h, --help      print this help message\n";
	print "to unmount filesystem, use:  fusermount -u mountpoint\n";
	exit(0);
}

$FILESYSTEM = $ARGV[0];

if ( ! -r "$FILESYSTEM" ) {
	print STDERR "Filesystem '$FILESYSTEM' can't be read.\n";
	exit(1);
}

my $mountpoint = $ARGV[1];
if ( ! -d "$mountpoint" ) {
	print STDERR "Mountpoint directory '$mountpoint' doesn't exists.\n";
	exit(1);
}

print "Building filesystem... "  if ($option_verbose);

if ($option_full) {
	init_fls();
	init_ils();
} else {
	init_fls("-d");
	init_ils()  if ($option_enhance);
}

print "Ready\n"  if ($option_verbose);

Fuse::main(mountpoint=>$mountpoint, mountopts=>$option_mountopts, getattr=>\&tskfs_getattr, getdir=>\&tskfs_getdir, open=>\&tskfs_open, read=>\&tskfs_read);


